{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let DarkModeButtonComponent = /*#__PURE__*/(() => {\n  class DarkModeButtonComponent {\n    constructor() {}\n\n    ngOnInit() {}\n\n  }\n\n  DarkModeButtonComponent.ɵfac = function DarkModeButtonComponent_Factory(t) {\n    return new (t || DarkModeButtonComponent)();\n  };\n\n  DarkModeButtonComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DarkModeButtonComponent,\n    selectors: [[\"app-dark-mode-button\"]],\n    decls: 6,\n    vars: 0,\n    consts: [[\"id\", \"dark-mode\", \"type\", \"checkbox\", \"name\", \"Dark mode\", \"role\", \"switch\", \"value\", \"on\", 1, \"toggle\"], [\"for\", \"dark-mode\", 1, \"sr\"], [1, \"curtain\"]],\n    template: function DarkModeButtonComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\");\n        i0.ɵɵelement(1, \"input\", 0);\n        i0.ɵɵelementStart(2, \"label\", 1);\n        i0.ɵɵtext(3, \"Dark Mode\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(4, \"div\", 2);\n        i0.ɵɵelement(5, \"from\");\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\"*[_ngcontent-%COMP%]{border:0;box-sizing:border-box;margin:0;padding:0}[_ngcontent-%COMP%]:root{--dur: .3s;font-size:calc(40px + (80 - 40)*(100vw - 320px)/(2560 - 320))}body[_ngcontent-%COMP%], input[_ngcontent-%COMP%]{color:#1a1a1a;font:1em/1.5 sans-serif}form[_ngcontent-%COMP%], .toggle[_ngcontent-%COMP%]:before, .toggle[_ngcontent-%COMP%]:after{background:hsl(0,0%,90%)}form[_ngcontent-%COMP%], .toggle[_ngcontent-%COMP%]{position:relative}form[_ngcontent-%COMP%]{display:flex;justify-content:right;align-items:right;height:100vh;right:0;top:0}.curtain[_ngcontent-%COMP%], .sr[_ngcontent-%COMP%], .toggle[_ngcontent-%COMP%]:before, .toggle[_ngcontent-%COMP%]:after{position:absolute}.curtain[_ngcontent-%COMP%], .toggle[_ngcontent-%COMP%]:before, .toggle[_ngcontent-%COMP%]:after{transition:transform var(--dur)}.curtain[_ngcontent-%COMP%], .toggle[_ngcontent-%COMP%]:before, .toggle[_ngcontent-%COMP%]:checked:after{transition-timing-function:ease-out}.curtain[_ngcontent-%COMP%], .sr[_ngcontent-%COMP%]{top:0;left:0}.curtain[_ngcontent-%COMP%]{background:hsl(0,0%,100%);mix-blend-mode:difference;pointer-events:none;width:100%;height:100%;transform:scaleX(0);transform-origin:0 50%}.sr[_ngcontent-%COMP%], .toggle[_ngcontent-%COMP%]{overflow:hidden}.sr[_ngcontent-%COMP%]{clip:rect(1px,1px,1px,1px);color:transparent;width:1px;height:1px}.toggle[_ngcontent-%COMP%]{background:currentColor;border-radius:.75em;cursor:pointer;width:3em;height:1.5em;-webkit-appearance:none;appearance:none;-webkit-tap-highlight-color:transparent}.toggle[_ngcontent-%COMP%]:before, .toggle[_ngcontent-%COMP%]:after{border-radius:50%;content:\\\"\\\";display:block;top:.25em;left:.25em;width:1em;height:1em}.toggle[_ngcontent-%COMP%]:before, .toggle[_ngcontent-%COMP%]:checked:after{transition-delay:0s}.toggle[_ngcontent-%COMP%]:checked:before, .toggle[_ngcontent-%COMP%]:after{transition-delay:calc(var(--dur) * .75);transition-timing-function:cubic-bezier(.3,1.6,.5,.7)}.toggle[_ngcontent-%COMP%]:before{transform:translate(-1.5em)}.toggle[_ngcontent-%COMP%]:checked:before{transform:translate(1.5em)}.toggle[_ngcontent-%COMP%]:checked:after{transform:translate(3em)}.toggle[_ngcontent-%COMP%]:checked ~ .curtain[_ngcontent-%COMP%]{transform:scaleX(1)}.toggle[_ngcontent-%COMP%]:focus{outline:transparent}\"]\n  });\n  return DarkModeButtonComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}